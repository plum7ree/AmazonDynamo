// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_INCLUDED_message_2eproto
#define PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_message_2eproto();
namespace myMessage {
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Key;
class KeyDefaultTypeInternal;
extern KeyDefaultTypeInternal _Key_default_instance_;
class KeyAndValue;
class KeyAndValueDefaultTypeInternal;
extern KeyAndValueDefaultTypeInternal _KeyAndValue_default_instance_;
class StorageInfo;
class StorageInfoDefaultTypeInternal;
extern StorageInfoDefaultTypeInternal _StorageInfo_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
}  // namespace myMessage
namespace google {
namespace protobuf {
template<> ::myMessage::Empty* Arena::CreateMaybeMessage<::myMessage::Empty>(Arena*);
template<> ::myMessage::Key* Arena::CreateMaybeMessage<::myMessage::Key>(Arena*);
template<> ::myMessage::KeyAndValue* Arena::CreateMaybeMessage<::myMessage::KeyAndValue>(Arena*);
template<> ::myMessage::StorageInfo* Arena::CreateMaybeMessage<::myMessage::StorageInfo>(Arena*);
template<> ::myMessage::Value* Arena::CreateMaybeMessage<::myMessage::Value>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace myMessage {

// ===================================================================

class KeyAndValue final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:myMessage.KeyAndValue) */ {
 public:
  KeyAndValue();
  virtual ~KeyAndValue();

  KeyAndValue(const KeyAndValue& from);

  inline KeyAndValue& operator=(const KeyAndValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyAndValue(KeyAndValue&& from) noexcept
    : KeyAndValue() {
    *this = ::std::move(from);
  }

  inline KeyAndValue& operator=(KeyAndValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const KeyAndValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyAndValue* internal_default_instance() {
    return reinterpret_cast<const KeyAndValue*>(
               &_KeyAndValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(KeyAndValue* other);
  friend void swap(KeyAndValue& a, KeyAndValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyAndValue* New() const final {
    return CreateMaybeMessage<KeyAndValue>(nullptr);
  }

  KeyAndValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KeyAndValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KeyAndValue& from);
  void MergeFrom(const KeyAndValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyAndValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string value = 2;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value(int index) const;
  ::std::string* mutable_value(int index);
  void set_value(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_value(int index, ::std::string&& value);
  #endif
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  ::std::string* add_value();
  void add_value(const ::std::string& value);
  #if LANG_CXX11
  void add_value(::std::string&& value);
  #endif
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& value() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_value();

  // repeated string prefList = 3;
  int preflist_size() const;
  void clear_preflist();
  static const int kPrefListFieldNumber = 3;
  const ::std::string& preflist(int index) const;
  ::std::string* mutable_preflist(int index);
  void set_preflist(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_preflist(int index, ::std::string&& value);
  #endif
  void set_preflist(int index, const char* value);
  void set_preflist(int index, const char* value, size_t size);
  ::std::string* add_preflist();
  void add_preflist(const ::std::string& value);
  #if LANG_CXX11
  void add_preflist(::std::string&& value);
  #endif
  void add_preflist(const char* value);
  void add_preflist(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& preflist() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_preflist();

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // int32 vectorClock = 4;
  void clear_vectorclock();
  static const int kVectorClockFieldNumber = 4;
  ::google::protobuf::int32 vectorclock() const;
  void set_vectorclock(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:myMessage.KeyAndValue)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> value_;
  ::google::protobuf::RepeatedPtrField<::std::string> preflist_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::int32 vectorclock_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Key final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:myMessage.Key) */ {
 public:
  Key();
  virtual ~Key();

  Key(const Key& from);

  inline Key& operator=(const Key& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Key(Key&& from) noexcept
    : Key() {
    *this = ::std::move(from);
  }

  inline Key& operator=(Key&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Key& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Key* internal_default_instance() {
    return reinterpret_cast<const Key*>(
               &_Key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Key* other);
  friend void swap(Key& a, Key& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Key* New() const final {
    return CreateMaybeMessage<Key>(nullptr);
  }

  Key* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Key>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Key& from);
  void MergeFrom(const Key& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Key* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:myMessage.Key)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Value final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:myMessage.Value) */ {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Value& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Value* other);
  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const final {
    return CreateMaybeMessage<Value>(nullptr);
  }

  Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string value = 1;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value(int index) const;
  ::std::string* mutable_value(int index);
  void set_value(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_value(int index, ::std::string&& value);
  #endif
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  ::std::string* add_value();
  void add_value(const ::std::string& value);
  #if LANG_CXX11
  void add_value(::std::string&& value);
  #endif
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& value() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_value();

  // int32 vectorClock = 2;
  void clear_vectorclock();
  static const int kVectorClockFieldNumber = 2;
  ::google::protobuf::int32 vectorclock() const;
  void set_vectorclock(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:myMessage.Value)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> value_;
  ::google::protobuf::int32 vectorclock_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class StorageInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:myMessage.StorageInfo) */ {
 public:
  StorageInfo();
  virtual ~StorageInfo();

  StorageInfo(const StorageInfo& from);

  inline StorageInfo& operator=(const StorageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StorageInfo(StorageInfo&& from) noexcept
    : StorageInfo() {
    *this = ::std::move(from);
  }

  inline StorageInfo& operator=(StorageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StorageInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StorageInfo* internal_default_instance() {
    return reinterpret_cast<const StorageInfo*>(
               &_StorageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(StorageInfo* other);
  friend void swap(StorageInfo& a, StorageInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StorageInfo* New() const final {
    return CreateMaybeMessage<StorageInfo>(nullptr);
  }

  StorageInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StorageInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StorageInfo& from);
  void MergeFrom(const StorageInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:myMessage.StorageInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Empty final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:myMessage.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:myMessage.Empty)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyAndValue

// string key = 1;
inline void KeyAndValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyAndValue::key() const {
  // @@protoc_insertion_point(field_get:myMessage.KeyAndValue.key)
  return key_.GetNoArena();
}
inline void KeyAndValue::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:myMessage.KeyAndValue.key)
}
#if LANG_CXX11
inline void KeyAndValue::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:myMessage.KeyAndValue.key)
}
#endif
inline void KeyAndValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myMessage.KeyAndValue.key)
}
inline void KeyAndValue::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myMessage.KeyAndValue.key)
}
inline ::std::string* KeyAndValue::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:myMessage.KeyAndValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyAndValue::release_key() {
  // @@protoc_insertion_point(field_release:myMessage.KeyAndValue.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyAndValue::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:myMessage.KeyAndValue.key)
}

// repeated string value = 2;
inline int KeyAndValue::value_size() const {
  return value_.size();
}
inline void KeyAndValue::clear_value() {
  value_.Clear();
}
inline const ::std::string& KeyAndValue::value(int index) const {
  // @@protoc_insertion_point(field_get:myMessage.KeyAndValue.value)
  return value_.Get(index);
}
inline ::std::string* KeyAndValue::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:myMessage.KeyAndValue.value)
  return value_.Mutable(index);
}
inline void KeyAndValue::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:myMessage.KeyAndValue.value)
  value_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void KeyAndValue::set_value(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:myMessage.KeyAndValue.value)
  value_.Mutable(index)->assign(std::move(value));
}
#endif
inline void KeyAndValue::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:myMessage.KeyAndValue.value)
}
inline void KeyAndValue::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:myMessage.KeyAndValue.value)
}
inline ::std::string* KeyAndValue::add_value() {
  // @@protoc_insertion_point(field_add_mutable:myMessage.KeyAndValue.value)
  return value_.Add();
}
inline void KeyAndValue::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:myMessage.KeyAndValue.value)
}
#if LANG_CXX11
inline void KeyAndValue::add_value(::std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:myMessage.KeyAndValue.value)
}
#endif
inline void KeyAndValue::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:myMessage.KeyAndValue.value)
}
inline void KeyAndValue::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:myMessage.KeyAndValue.value)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
KeyAndValue::value() const {
  // @@protoc_insertion_point(field_list:myMessage.KeyAndValue.value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
KeyAndValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:myMessage.KeyAndValue.value)
  return &value_;
}

// repeated string prefList = 3;
inline int KeyAndValue::preflist_size() const {
  return preflist_.size();
}
inline void KeyAndValue::clear_preflist() {
  preflist_.Clear();
}
inline const ::std::string& KeyAndValue::preflist(int index) const {
  // @@protoc_insertion_point(field_get:myMessage.KeyAndValue.prefList)
  return preflist_.Get(index);
}
inline ::std::string* KeyAndValue::mutable_preflist(int index) {
  // @@protoc_insertion_point(field_mutable:myMessage.KeyAndValue.prefList)
  return preflist_.Mutable(index);
}
inline void KeyAndValue::set_preflist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:myMessage.KeyAndValue.prefList)
  preflist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void KeyAndValue::set_preflist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:myMessage.KeyAndValue.prefList)
  preflist_.Mutable(index)->assign(std::move(value));
}
#endif
inline void KeyAndValue::set_preflist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  preflist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:myMessage.KeyAndValue.prefList)
}
inline void KeyAndValue::set_preflist(int index, const char* value, size_t size) {
  preflist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:myMessage.KeyAndValue.prefList)
}
inline ::std::string* KeyAndValue::add_preflist() {
  // @@protoc_insertion_point(field_add_mutable:myMessage.KeyAndValue.prefList)
  return preflist_.Add();
}
inline void KeyAndValue::add_preflist(const ::std::string& value) {
  preflist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:myMessage.KeyAndValue.prefList)
}
#if LANG_CXX11
inline void KeyAndValue::add_preflist(::std::string&& value) {
  preflist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:myMessage.KeyAndValue.prefList)
}
#endif
inline void KeyAndValue::add_preflist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  preflist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:myMessage.KeyAndValue.prefList)
}
inline void KeyAndValue::add_preflist(const char* value, size_t size) {
  preflist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:myMessage.KeyAndValue.prefList)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
KeyAndValue::preflist() const {
  // @@protoc_insertion_point(field_list:myMessage.KeyAndValue.prefList)
  return preflist_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
KeyAndValue::mutable_preflist() {
  // @@protoc_insertion_point(field_mutable_list:myMessage.KeyAndValue.prefList)
  return &preflist_;
}

// int32 vectorClock = 4;
inline void KeyAndValue::clear_vectorclock() {
  vectorclock_ = 0;
}
inline ::google::protobuf::int32 KeyAndValue::vectorclock() const {
  // @@protoc_insertion_point(field_get:myMessage.KeyAndValue.vectorClock)
  return vectorclock_;
}
inline void KeyAndValue::set_vectorclock(::google::protobuf::int32 value) {
  
  vectorclock_ = value;
  // @@protoc_insertion_point(field_set:myMessage.KeyAndValue.vectorClock)
}

// -------------------------------------------------------------------

// Key

// string key = 1;
inline void Key::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Key::key() const {
  // @@protoc_insertion_point(field_get:myMessage.Key.key)
  return key_.GetNoArena();
}
inline void Key::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:myMessage.Key.key)
}
#if LANG_CXX11
inline void Key::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:myMessage.Key.key)
}
#endif
inline void Key::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myMessage.Key.key)
}
inline void Key::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myMessage.Key.key)
}
inline ::std::string* Key::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:myMessage.Key.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Key::release_key() {
  // @@protoc_insertion_point(field_release:myMessage.Key.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Key::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:myMessage.Key.key)
}

// -------------------------------------------------------------------

// Value

// repeated string value = 1;
inline int Value::value_size() const {
  return value_.size();
}
inline void Value::clear_value() {
  value_.Clear();
}
inline const ::std::string& Value::value(int index) const {
  // @@protoc_insertion_point(field_get:myMessage.Value.value)
  return value_.Get(index);
}
inline ::std::string* Value::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:myMessage.Value.value)
  return value_.Mutable(index);
}
inline void Value::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:myMessage.Value.value)
  value_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Value::set_value(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:myMessage.Value.value)
  value_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Value::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:myMessage.Value.value)
}
inline void Value::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:myMessage.Value.value)
}
inline ::std::string* Value::add_value() {
  // @@protoc_insertion_point(field_add_mutable:myMessage.Value.value)
  return value_.Add();
}
inline void Value::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:myMessage.Value.value)
}
#if LANG_CXX11
inline void Value::add_value(::std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:myMessage.Value.value)
}
#endif
inline void Value::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:myMessage.Value.value)
}
inline void Value::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:myMessage.Value.value)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Value::value() const {
  // @@protoc_insertion_point(field_list:myMessage.Value.value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Value::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:myMessage.Value.value)
  return &value_;
}

// int32 vectorClock = 2;
inline void Value::clear_vectorclock() {
  vectorclock_ = 0;
}
inline ::google::protobuf::int32 Value::vectorclock() const {
  // @@protoc_insertion_point(field_get:myMessage.Value.vectorClock)
  return vectorclock_;
}
inline void Value::set_vectorclock(::google::protobuf::int32 value) {
  
  vectorclock_ = value;
  // @@protoc_insertion_point(field_set:myMessage.Value.vectorClock)
}

// -------------------------------------------------------------------

// StorageInfo

// string ip = 1;
inline void StorageInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageInfo::ip() const {
  // @@protoc_insertion_point(field_get:myMessage.StorageInfo.ip)
  return ip_.GetNoArena();
}
inline void StorageInfo::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:myMessage.StorageInfo.ip)
}
#if LANG_CXX11
inline void StorageInfo::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:myMessage.StorageInfo.ip)
}
#endif
inline void StorageInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myMessage.StorageInfo.ip)
}
inline void StorageInfo::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myMessage.StorageInfo.ip)
}
inline ::std::string* StorageInfo::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:myMessage.StorageInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageInfo::release_ip() {
  // @@protoc_insertion_point(field_release:myMessage.StorageInfo.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageInfo::set_allocated_ip(::std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:myMessage.StorageInfo.ip)
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace myMessage

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_message_2eproto
